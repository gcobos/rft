#!/usr/bin/python3

from copy import copy
from collections import Counter
import sys
from time import time
from heapq import heapify
import itertools


# For each symbol: (isFunction, numParams, isCommutative)
grammar={
	'a':(0,0,0),
	'b':(0,0,0),
	'c':(0,0,0),
	'Sum':(1,2,1),
	'Half':(1,1,0),
	#'div':(1,2,0),
}


nodes=[]

# Primitives, params of the parent, and the number of funcions to use inside 
def getNodeKey (grammar, level=0, maxLevel=0):

    global nodes

    if len(nodes)>=level-1:
        nodes.insert(level,[])

    options = grammar # if level<2 else { k: v for k,v in grammar.items() if v[0]}

    print("Options in ",level,": ",options)
    chains=list(nodes[level-1])
    #chains2=nodes[level-1]
    #if level==maxLevel-1:
    print("Chains",chains)
    #print("Chains2",chains2)
    for i in options:
        isFunction,params,isCommutative=options[i]
        if isFunction:
            if isCommutative:
                generator=itertools.combinations_with_replacement(chains,params)
            else:
                generator=itertools.product(chains,repeat=params)
            for j in generator:
                key = i + '(' + ','.join(j) + ')'
                #if not key in itertools.nodes[level-1]:
                nodes[level].append(key)
                yield i + '(' + ','.join(j) + ')'

        else:               	# its a parameter
            #if not i in nodes[level-1]:
            nodes[level].append(i)
            yield i
    return


time0=time()
cnt=0
try:
    maxLevel=int(sys.argv[1])
except:
    maxLevel=2

nodes=[]
for level in range(maxLevel):
    
	print("** Entering level",level)
	
	for i in getNodeKey(grammar,level=level, maxLevel=maxLevel):
		#if level==maxLevel-1:
		print(i)
		cnt=cnt+1
t = time()-time0
print("Total,",cnt,"Time ", t, '\nSpeed:', cnt/t/1000)

